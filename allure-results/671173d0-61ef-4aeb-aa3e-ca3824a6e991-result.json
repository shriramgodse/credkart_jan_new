{"name": "test_UserRegistration_001", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: chrome=120.0.6099.217)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7129E4D02+56194]\n\t(No symbol) [0x00007FF7129504B2]\n\t(No symbol) [0x00007FF7127F76AA]\n\t(No symbol) [0x00007FF7127E0839]\n\t(No symbol) [0x00007FF7127E06EB]\n\t(No symbol) [0x00007FF7127DEE3D]\n\t(No symbol) [0x00007FF7127DF7CE]\n\t(No symbol) [0x00007FF7127ED6CD]\n\t(No symbol) [0x00007FF712804471]\n\t(No symbol) [0x00007FF71280937A]\n\t(No symbol) [0x00007FF7127DFEC6]\n\t(No symbol) [0x00007FF7128041CF]\n\t(No symbol) [0x00007FF7128826B4]\n\t(No symbol) [0x00007FF712865C23]\n\t(No symbol) [0x00007FF712834A45]\n\t(No symbol) [0x00007FF712835AD4]\n\tGetHandleVerifier [0x00007FF712D5D5BB+3695675]\n\tGetHandleVerifier [0x00007FF712DB6197+4059159]\n\tGetHandleVerifier [0x00007FF712DADF63+4025827]\n\tGetHandleVerifier [0x00007FF712A7F029+687785]\n\t(No symbol) [0x00007FF71295B508]\n\t(No symbol) [0x00007FF712957564]\n\t(No symbol) [0x00007FF7129576E9]\n\t(No symbol) [0x00007FF712948094]\n\tBaseThreadInitThunk [0x00007FF9C6487344+20]\n\tRtlUserThreadStart [0x00007FF9C6D026B1+33]", "trace": "browser = None\n\n    @pytest.fixture()\n    def setup(browser):\n        if browser == 'chrome':\n            print(\"Launching Chrome Browser\")\n            driver = webdriver.Chrome()\n        elif browser == 'firefox':\n            print(\"Launching Firefox Browser\")\n            driver = webdriver.Firefox()\n        elif browser == 'edge':\n            print(\"Launching Edge Browser\")\n            driver = webdriver.Edge()\n        #if browser == 'headless':\n        else:\n            # print(\"Headless mode\")\n            # chrome_options = webdriver.FirefoxOptions()\n            # chrome_options.add_argument(\"headless\")\n            # driver = webdriver.Chrome(options= chrome_options)\n            driver = webdriver.Chrome()\n>       driver.maximize_window()\n\ntestCases\\conftest.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\MY PC\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:978: in maximize_window\n    self.execute(command, params)\nC:\\Users\\MY PC\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:418: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000226CE4D3340>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 3...07FF712948094]\\\\n\\\\tBaseThreadInitThunk [0x00007FF9C6487344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FF9C6D026B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\nE         (Session info: chrome=120.0.6099.217)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7129E4D02+56194]\nE       \t(No symbol) [0x00007FF7129504B2]\nE       \t(No symbol) [0x00007FF7127F76AA]\nE       \t(No symbol) [0x00007FF7127E0839]\nE       \t(No symbol) [0x00007FF7127E06EB]\nE       \t(No symbol) [0x00007FF7127DEE3D]\nE       \t(No symbol) [0x00007FF7127DF7CE]\nE       \t(No symbol) [0x00007FF7127ED6CD]\nE       \t(No symbol) [0x00007FF712804471]\nE       \t(No symbol) [0x00007FF71280937A]\nE       \t(No symbol) [0x00007FF7127DFEC6]\nE       \t(No symbol) [0x00007FF7128041CF]\nE       \t(No symbol) [0x00007FF7128826B4]\nE       \t(No symbol) [0x00007FF712865C23]\nE       \t(No symbol) [0x00007FF712834A45]\nE       \t(No symbol) [0x00007FF712835AD4]\nE       \tGetHandleVerifier [0x00007FF712D5D5BB+3695675]\nE       \tGetHandleVerifier [0x00007FF712DB6197+4059159]\nE       \tGetHandleVerifier [0x00007FF712DADF63+4025827]\nE       \tGetHandleVerifier [0x00007FF712A7F029+687785]\nE       \t(No symbol) [0x00007FF71295B508]\nE       \t(No symbol) [0x00007FF712957564]\nE       \t(No symbol) [0x00007FF7129576E9]\nE       \t(No symbol) [0x00007FF712948094]\nE       \tBaseThreadInitThunk [0x00007FF9C6487344+20]\nE       \tRtlUserThreadStart [0x00007FF9C6D026B1+33]\n\nC:\\Users\\MY PC\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: TimeoutException"}, "start": 1705337794362, "stop": 1705337794362, "uuid": "ca171d8b-80a8-4669-a3be-fd354b7de5e7", "historyId": "4afa1af993bf5b6fb6aaa665673bd860", "testCaseId": "4afa1af993bf5b6fb6aaa665673bd860", "fullName": "testCases.test_UserProfile.Test_User_Profile#test_UserRegistration_001", "labels": [{"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_UserProfile"}, {"name": "subSuite", "value": "Test_User_Profile"}, {"name": "host", "value": "Sanjyot"}, {"name": "thread", "value": "6472-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_UserProfile"}]}