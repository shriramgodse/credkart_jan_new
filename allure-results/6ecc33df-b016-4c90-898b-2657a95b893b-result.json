{"name": "test_UserLogin_002", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Microsoft Edge failed to start: crashed.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from msedge location C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe is no longer running, so msedgedriver is assuming that msedge has crashed.)\nStacktrace:\n\tGetHandleVerifier [0x00007FF642CA0352+58194]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF642C2ECB2+216530]\n\t(No symbol) [0x00007FF642A49E1B]\n\t(No symbol) [0x00007FF642A830A3]\n\t(No symbol) [0x00007FF642A7CAA1]\n\t(No symbol) [0x00007FF642AC63BE]\n\t(No symbol) [0x00007FF642ABBD43]\n\t(No symbol) [0x00007FF642A8C162]\n\t(No symbol) [0x00007FF642A8B5BD]\n\t(No symbol) [0x00007FF642A8C994]\n\tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF642E56CFA+1051354]\n\t(No symbol) [0x00007FF642B0F596]\n\tMicrosoft::Applications::Events::EventProperty::clear [0x00007FF642BA6205+34245]\n\tMicrosoft::Applications::Events::EventProperty::clear [0x00007FF642B9E6AD+2669]\n\tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF642E559F3+1046483]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF642C38998+256696]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF642C34124+238148]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF642C34252+238450]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF642C28FF1+192785]\n\tBaseThreadInitThunk [0x00007FF881387344+20]\n\tRtlUserThreadStart [0x00007FF8825226B1+33]", "trace": "browser = 'edge'\n\n    @pytest.fixture()\n    def setup(browser):\n        if browser == 'chrome':\n            print(\"Launching Chrome Browser\")\n            driver = webdriver.Chrome()\n        elif browser == 'firefox':\n            print(\"Launching Firefox Browser\")\n            driver = webdriver.Firefox()\n        elif browser == 'edge':\n            print(\"Launching Edge Browser\")\n>           driver = webdriver.Edge()\n\ntestCases\\conftest.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\edge\\webdriver.py:45: in __init__\n    super().__init__(\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:56: in __init__\n    super().__init__(\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:208: in __init__\n    self.start_session(capabilities)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:292: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000029953B39150>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: Microsoft Edge faile...C28FF1+192785]\\\\n\\\\tBaseThreadInitThunk [0x00007FF881387344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FF8825226B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Microsoft Edge failed to start: crashed.\nE         (session not created: DevToolsActivePort file doesn't exist)\nE         (The process started from msedge location C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe is no longer running, so msedgedriver is assuming that msedge has crashed.)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF642CA0352+58194]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF642C2ECB2+216530]\nE       \t(No symbol) [0x00007FF642A49E1B]\nE       \t(No symbol) [0x00007FF642A830A3]\nE       \t(No symbol) [0x00007FF642A7CAA1]\nE       \t(No symbol) [0x00007FF642AC63BE]\nE       \t(No symbol) [0x00007FF642ABBD43]\nE       \t(No symbol) [0x00007FF642A8C162]\nE       \t(No symbol) [0x00007FF642A8B5BD]\nE       \t(No symbol) [0x00007FF642A8C994]\nE       \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF642E56CFA+1051354]\nE       \t(No symbol) [0x00007FF642B0F596]\nE       \tMicrosoft::Applications::Events::EventProperty::clear [0x00007FF642BA6205+34245]\nE       \tMicrosoft::Applications::Events::EventProperty::clear [0x00007FF642B9E6AD+2669]\nE       \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF642E559F3+1046483]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF642C38998+256696]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF642C34124+238148]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF642C34252+238450]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF642C28FF1+192785]\nE       \tBaseThreadInitThunk [0x00007FF881387344+20]\nE       \tRtlUserThreadStart [0x00007FF8825226B1+33]\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: SessionNotCreatedException"}, "attachments": [{"name": "stdout", "source": "b49477d7-985d-4586-b0a7-73891eaeeb15-attachment.txt", "type": "text/plain"}], "start": 1705027709553, "stop": 1705027709553, "uuid": "cf0ffb96-9111-4bfb-8026-8be9907c888a", "historyId": "f9656eb1ecd5e234b06968e36c9922ba", "testCaseId": "f9656eb1ecd5e234b06968e36c9922ba", "fullName": "testCases.test_UserProfile.Test_User_Profile#test_UserLogin_002", "labels": [{"name": "tag", "value": "sanity"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_UserProfile"}, {"name": "subSuite", "value": "Test_User_Profile"}, {"name": "host", "value": "Tushar-Pc"}, {"name": "thread", "value": "9932-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_UserProfile"}]}